SHELL := bash
.ONESHELL:
.SHELLFLAGS := -eu -o pipefail -c
.DELETE_ON_ERROR:
MAKEFLAGS += --warn-undefined-variables
MAKEFLAGS += --no-builtin-rules

##------------------ VARIABLES--------------------------##

# SRR number to download reads
SRR=SRR31326199

# Number of reads to download
N=10000

# Downloaded read names
R1=reads/${SRR}_1.fastq
R2=reads/${SRR}_2.fastq

# The reads directory
RDIR=reads

# The accession number of the genome
ACC=GCF_000675775.1

# The name of the genome file
GENOME=TB.fa

# The name of the GFF file
GFF=TB.gff

COUNT_TXT=TB_matrix.txt
COUNT=counts.csv

DESIGN=design.csv
EDGER=edger.csv
##--------------- DO NOT CHANGE BLOW HERE ----------------##

usage:
	@echo "Usage: make <target>"
	@echo ""
	@echo "Targets:"
	@echo "  reads: Download SRA files"
	@echo "  download: Download the genome and GFF files"
	@echo "  index: Index the genome file"
	@echo "  align: Align the reads to the genome"
	@echo "  all: Download reads, download genome, index genome, align reads"
	@echo "  clean: Remove all files generated by this Makefile"

reads:
	mkdir -p ${RDIR}

	# Download the SRR data
	fastq-dump --split-files -X ${N} -O ${RDIR} ${SRR}

download:  
	# Download fasta file from NCBI
	datasets download genome accession ${ACC} --include genome,gff3,gtf
	unzip -o ncbi_dataset.zip

	# Rename genome files 
	if [ ! -f TB.fa ]; then \
		ln -s ncbi_dataset/data/GCF_000675775.1/GCF_000675775.1_Myco_tube_TB_RSA126_V1_genomic.fna TB.fa; \
	fi
	if [ ! -f TB.gff ]; then \
		ln -s ncbi_dataset/data/GCF_000675775.1/genomic.gff TB.gff; \
	fi
	if [ ! -f TB.gtf ]; then \
		ln -s ncbi_dataset/data/GCF_000675775.1/genomic.gtf TB.gtf; \
	fi

index: 
	# Generate hiseq2 index
	mkdir -p hisat_index
	hisat2-build ${GENOME} hisat_index/${GENOME}-index


align: 
	# Make the bam directory
	mkdir -p bam

	# Align the reads via hisat2
	hisat2 -x hisat_index/${GENOME}-index -1 ${R1} -2 ${R2} -S bam/${SRR}_aligned_reads.sam

	# Convert the sam file to a bam file
	samtools view -b -o bam/${SRR}_aligned_reads.bam bam/${SRR}_aligned_reads.sam

	# Sort the bam file
	samtools sort -o bam/${SRR}_aligned_reads.sorted.bam bam/${SRR}_aligned_reads.bam

	# Index the bam file
	samtools index bam/${SRR}_aligned_reads.sorted.bam

	# Create a bigwig coverage file
	bamCoverage -b bam/${SRR}_aligned_reads.sorted.bam -o bam/${SRR}_aligned_reads.bw

	# Index the bigwig file
	#bigWigIndex bam/${SRR}_aligned_reads.bw
count:
	featureCounts -a ${GFF} -o ${COUNT_TXT} /bam/*.bam
	# convert file format to CSV
	Rscript src/r/format_featurecounts.r -c TB_matrix.txt -o counts.csv
diff:
	Rscript src/r/edger.r -c ${COUNT} -d ${DESIGN}
	Rscript src/r/deseq2.r -c ${COUNT} -d ${DESIGN}

	# Evaluate edge R results
	Rscript  src/r/evaluate_results.r  -a ${COUNT} -b ${EDGER}
pca:
	src/r/plot_pca.r -c ${EDGER}
heatmap:
	src/r/plot_heatmap.r -c ${EDGER}
	
all: reads download index align count diff pca heatmap clean

clean:
	rm -rf ${RDIR} ${GENOME} ${GFF} bam TB.fa-index.1.ht2 TB.fa-index.2.ht2 TB.fa-index.3.ht2 TB.fa-index.4.ht2 TB.fa-index.5.ht2 TB.fa-index.6.ht2 TB.fa-index.7.ht2 TB.fa-index.8.ht2 TB.fa-index.9.ht2 md5sum.txt ncbi_dataset.zip ncbi_dataset README.md 

.PHONY: usage all clean reads download index align count diff pca heatmap clean





